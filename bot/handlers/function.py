import os
import time
import tempfile
import asyncio
import hashlib
import shutil
import logging
import yt_dlp
from aiogram import Bot
from aiogram.types import FSInputFile

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è Telegram (50 –ú–ë)
MAX_FILE_SIZE = 50 * 1024 * 1024

def generate_url_id(url: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è URL."""
    return hashlib.md5(url.encode()).hexdigest()

def select_best_format(formats: list, socNet: str) -> str:
    """
    –í—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–π —Ñ–æ—Ä–º–∞—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Ü—Å–µ—Ç–∏.
    :param formats: –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤.
    :param socNet: –°–æ—Ü—Å–µ—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, "tiktok", "youtube").
    :return: –õ—É—á—à–∏–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ None.
    """
    if socNet == "tiktok":
        # –î–ª—è TikTok –≤—ã–±–∏—Ä–∞–µ–º —Ñ–æ—Ä–º–∞—Ç —Å –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ
        best_format = max(
            (f for f in formats if f.get("vcodec") != "none" and f.get("acodec") != "none"),
            key=lambda f: (f.get("tbr") or 0),  # –ï—Å–ª–∏ tbr = None, —Å—Ç–∞–≤–∏–º 0
            default=None
        )
        return best_format["format_id"] if best_format else None

    elif socNet == "youtube":
        # –î–ª—è YouTube –≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–µ–µ –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ
        video_formats = [f for f in formats if f.get("vcodec") != "none" and f.get("acodec") == "none"]
        audio_formats = [f for f in formats if f.get("vcodec") == "none" and f.get("acodec") != "none"]

        best_video = max(video_formats, key=lambda f: (f.get("height") or 0, f.get("vbr") or 0), default=None)
        best_audio = max(audio_formats, key=lambda f: (f.get("abr") or 0), default=None)

        if best_video and best_audio:
            return f"{best_video['format_id']}+{best_audio['format_id']}"
        else:
            return None

    else:
        # –î–ª—è –¥—Ä—É–≥–∏—Ö —Å–æ—Ü—Å–µ—Ç–µ–π –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        return formats[0]["format_id"] if formats else None

async def download_media(url: str, format_id: str, output_path: str) -> str:
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º.
    :param url: –°—Å—ã–ª–∫–∞ –Ω–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª.
    :param format_id: ID —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.
    :param output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞.
    :return: –ü—É—Ç—å –∫ —Å–∫–∞—á–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É.
    """
    ydl_opts = {
        'format': format_id,
        'outtmpl': output_path,
        'merge_output_format': 'mp4',
        'quiet': True,
    }
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        info = await asyncio.to_thread(ydl.extract_info, url, download=True)
        return info.get("requested_downloads", [{}])[0].get("filepath", output_path)

async def download_and_send_media(bot: Bot, chat_id: int, url: str, socNet: str):
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ Telegram.
    :param bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞.
    :param chat_id: ID —á–∞—Ç–∞.
    :param url: –°—Å—ã–ª–∫–∞ –Ω–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª.
    :param socNet: –°–æ—Ü—Å–µ—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, "tiktok", "youtube").
    """
    temp_dir = tempfile.mkdtemp()  # –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    video_id = generate_url_id(url)  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –≤–∏–¥–µ–æ
    filename = os.path.join(temp_dir, f"{video_id}.mp4")  # –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞

    try:
        start_time = time.time()

        # 1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
        with yt_dlp.YoutubeDL({'quiet': True}) as ydl:
            info = await asyncio.to_thread(ydl.extract_info, url, download=False)
            formats = info.get('formats', [])

        if not formats:
            await bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤.")
            return

        # 2Ô∏è‚É£ –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π —Ñ–æ—Ä–º–∞—Ç
        best_format_id = select_best_format(formats, socNet)
        if not best_format_id:
            await bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–æ—Ä–º–∞—Ç.")
            return

        logger.info(f"‚úÖ –í—ã–±—Ä–∞–Ω —Ñ–æ—Ä–º–∞—Ç: {best_format_id}")

        # 3Ô∏è‚É£ –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ —Å —ç—Ç–∏–º —Ñ–æ—Ä–º–∞—Ç–æ–º
        real_filename = await download_media(url, best_format_id, filename)

        # 4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        if os.path.exists(real_filename):
            file_size = os.path.getsize(real_filename)
            if file_size > MAX_FILE_SIZE:
                await bot.send_message(chat_id, "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram.")
                os.remove(real_filename)
                shutil.rmtree(temp_dir)
                return

            # 5Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –≤ Telegram
            end_time = time.time()
            elapsed_time = end_time - start_time

            media_file = FSInputFile(real_filename)
            await bot.send_video(chat_id, video=media_file, caption=f"üìπ –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞ {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥")
            os.remove(real_filename)  # –£–¥–∞–ª—è–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
        else:
            await bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏.")

    except Exception as ex:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ: {ex}")
        await bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {ex}")

    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
        if os.path.exists(temp_dir):
            shutil.rmtree(temp_dir)